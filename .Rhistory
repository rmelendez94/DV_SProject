shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
title: "DV_SProject"
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
require("jsonlite")
require("RCurl")
#Gather data from database fill into local data frame and retrieve headers and summary
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from BNKMKTG"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_rm46926', PASS='orcl_rm46926', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
head(df)
summary(df)
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
# 03-reactive
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input, output) {
data <- reactive({
rnorm(input$num)
})
output$hist <- renderPlot({
hist(data())
})
output$stats <- renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
# 03-reactive
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input, output) {
data <- reactive({
rnorm(input$num)
})
output$hist <- renderPlot({
hist(data())
})
output$stats <- renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('~/Desktop/Desktop/UT/Fall 2015/Data Visualization/DrCannata/RWorkshop/09 Shiny/03Dashboard')
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
require(shinydashboard)
require(leaflet)
require(DT)
install.packages("shinydashboard")
install.packages("leaflet")
shiny::runApp('~/Desktop/Desktop/UT/Fall 2015/Data Visualization/DrCannata/RWorkshop/09 Shiny/03Dashboard')
shiny::runApp('~/Desktop/Desktop/UT/Fall 2015/Data Visualization/DrCannata/RWorkshop/09 Shiny/03Dashboard')
shiny::runApp('~/Desktop/Desktop/UT/Fall 2015/Data Visualization/DrCannata/RWorkshop/09 Shiny/03Dashboard')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
require(tidyr)
require(dplyr)
require(extrafont)
require(ggplot2)
require(jsonlite)
require(RCurl)
dfbl <-
data.frame(fromJSON(getURL(
URLencode(
gsub(
"\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query=
"""select JOB_TYPE as job_name, \\\'AVERAGE_SALARY\\\' as measure_names,
sum(AVERAGE_SALARY) as measure_values
from JOBTYPE
group by JOB_TYPE
union all
select JOB as job_name, \\\'CAMPAIGN\\\' as measure_names, sum(CAMPAIGN) as measure_values from BNKMKTG
group by JOB;"""'
)
), httpheader = c(
DB = 'jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER =
'C##cs329e_rm46926', PASS = 'orcl_rm46926', MODE = 'native_mode', MODEL = 'model', returnDimensions = 'False', returnFor = 'JSON'
), verbose = TRUE
))); #View(dfbl)
# Rearranges measure_names into usable columns
ndfbl <- spread(dfbl, MEASURE_NAMES, MEASURE_VALUES) %>% arrange(desc(AVERAGE_SALARY))
# Creates an ordered column of job type to be used for ordering in ggplot
ndfbl$ORDERED_JOBS <- reorder(ndfbl$JOB_NAME, ndfbl$AVERAGE_SALARY)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous(limits = c(0,100000)) +
scale_fill_gradient(low = "grey90", high = "darkgreen", na.value = "grey90", guide = "colourbar") +
labs(title = 'Portuguese Bank Marketing Campaign Effectiveness\nBlending\nAVG_SALARY') +
labs(x = paste("JOB TYPE"), y = paste("AVERAGE SALARY")) +
theme(panel.background=element_rect(fill='grey100')) +
layer(
data = ndfbl,
mapping = aes(x = ORDERED_JOBS, y = AVERAGE_SALARY, fill = CAMPAIGN),
stat = "identity",
stat_params = list(),
geom = "bar",
geom_params = list(width=.5),
position = position_identity()
) +
layer(
data = ndfbl,
mapping = aes(
x = ORDERED_JOBS, y = AVERAGE_SALARY, label = round(CAMPAIGN)
),
stat = "identity",
stat_params = list(),
geom = "text",
geom_params = list(colour = "black", hjust = -0.1),
position = position_identity()
) + coord_flip()
shiny::runApp('02 Shiny')
shiny::runApp('~/Desktop/Desktop/UT/Fall 2015/Data Visualization/DrCannata/RWorkshop/09 Shiny/03Dashboard')
shiny::runApp('02 Shiny')
shiny::runApp('~/Desktop/Desktop/UT/Fall 2015/Data Visualization/DrCannata/RWorkshop/09 Shiny/03Dashboard')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
